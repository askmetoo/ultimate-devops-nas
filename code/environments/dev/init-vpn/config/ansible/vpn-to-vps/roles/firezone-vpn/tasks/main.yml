---
- name: Caddy Reverse Proxy Docker Container Creation
  docker_container:
    name: caddy
    image: caddy:2
    pull: true
    volumes:
      - "{{ firezone_vpn_install_directory }}/caddy:/data/caddy"
    # See Caddy's documentation for customizing this line
    # https://caddyserver.com/docs/quick-starts/reverse-proxy
    command: ["/bin/sh", "-c", "| cat <<EOF > /etc/caddy/Caddyfile && caddy run --config /etc/caddy/Caddyfile\n
        https:// {\n
          log\n
          reverse_proxy * 172.25.0.100:13000\n
          ${TLS_OPTS:-}\n
        }\n
        EOF"]
    network_mode: "host"
    restart_policy: unless-stopped
  when: firezone_vpn_enabled is true

# 
# 
# 

- name: Firezone Docker Container Creation
  docker_container:
    name: "{{ firezone_vpn_container_name }}"
    image: "{{ firezone_vpn_container_name }}/{{ firezone_vpn_container_name }}:latest"
    ports: "{{ firezone_vpn_port }}:{{ firezone_vpn_port }}/udp"
    memory: "{{ firezone_vpn_memory }}"
    env_file: "{{ firezone_vpn_install_directory }}/.env"
    # This should contain a list of env vars for configuring Firezone.
    # See https://docs.firezone.dev/reference/env-vars for more info.
    pull: true
    restart_policy: unless-stopped
    volumes: "{{ firezone_vpn_install_directory }}/{{ firezone_vpn_container_name }}:/var/{{ firezone_vpn_container_name }}"
      # IMPORTANT: Persists WireGuard private key and other data. If
      # /var/firezone/private_key exists when Firezone starts, it is
      # used as the WireGuard private. Otherwise, one is generated.
    depends_on:
      - "{{ firezone_vpn_database }}"
    capabilities:
      # Needed for WireGuard and firewall support.
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
    # Needed for masquerading and NAT.
      net.ipv6.conf.all.disable_ipv6: "0"
      net.ipv6.conf.all.forwarding: "1"
      net.ipv4.ip_forward: "1"
    networks:
      name: "{{ firezone_vpn_container_name }}-network"
      ipv4_address: "172.25.0.100"
      ipv6_address: "2001:3990:3990::99"
      links:
        - "{{ firezone_vpn_database }}"
    labels:
      traefik.enable: "{{ firezone_vpn_available_externally | string }}"
      traefik.http.routers.firezone.rule: "Host(`{{ firezone_vpn_hostname }}.{{ vpn_host_domain }}`)"
      traefik.http.routers.firezone.tls.certresolver: "letsencrypt"
      traefik.http.routers.firezone.tls.domains[0].main: "{{ vpn_host_domain }}"
      traefik.http.routers.firezone.tls.domains[0].sans: "*.{{ vpn_host_domain }}"
      traefik.http.services.firezone.loadbalancer.server.port: "80"
  when: firezone_vpn_enabled is true

# 
# 
# 

- name: Stop Firezone Container
  block:
    - name: Stop Firezone
      docker_container:
        name: "{{ firezone_vpn_container_name }}"
        state: absent
  when: firezone_vpn_enabled is false

# 
# 
# 

- name: Postgres Docker Container Volume Creation
  docker_volume:
    name: "{{ firezone_vpn_database }}-data"
  when: firezone_vpn_enabled is true

# 
# 
# 

- name: Postgres Docker Container
  docker_container:
    name: "{{ firezone_vpn_database }}"
    image: "{{ firezone_vpn_database }}:15"
    volumes: "{{ firezone_vpn_database }}-data:/var/lib/postgresql/data"
    ports: "{{ firezone_vpn_port }}:{{ firezone_vpn_port }}/udp"
    env_file: 
      POSTGRES_DB: "{{ firezone_vpn_database_name }}"
      POSTGRES_USER: "{{ firezone_vpn_database }}"
    pull: true
    restart_policy: unless-stopped
  when: firezone_vpn_enabled is true

# 
# 
# 

- name: Firezone Docker Network Creation
  docker_network:
    name: "{{ firezone_vpn_container_name }}-network"
    enable_ipv6: "true"
    driver: "bridge"
    ipam_config:
      - subnet: "172.25.0.0/16"
      - subnet: "2001:3990:3990::/64"
        gateway: "2001:3990:3990::1"
  when: firezone_vpn_enabled is true

# - name: Download official Firezone docker-compose build
#   ansible.builtin.get_url:
#     url: https://raw.githubusercontent.com/firezone/firezone/master/docker-compose.prod.yml
#     dest: /tmp/docker-compose.yml
#     mode: '0440'
